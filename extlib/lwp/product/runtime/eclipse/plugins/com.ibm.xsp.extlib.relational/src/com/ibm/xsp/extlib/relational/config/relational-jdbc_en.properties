# *****************************************************************
# /*
# * Copyright IBM Corp. 2010, 2016
# * 
# * Licensed under the Apache License, Version 2.0 (the "License"); 
# * you may not use this file except in compliance with the License. 
# * You may obtain a copy of the License at:
# * 
# * http://www.apache.org/licenses/LICENSE-2.0
# * 
# * Unless required by applicable law or agreed to in writing, software 
# * distributed under the License is distributed on an "AS IS" BASIS, 
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
# * implied. See the License for the specific language governing 
# * permissions and limitations under the License.
# */
# *****************************************************************

# DO NOT EDIT. THIS FILE IS GENERATED.
# NLS_ENCODING=UNICODE 
# NLS_MARKUP=IBMNJDK2 
# NLS_MESSAGEFORMAT_NONE
## G11N SA UI -- Special IT Audience resources follow
property.connectionName.group.connection.name= Connection Name
property.connectionName.group.connection.descr= Provides the JDBC Connection name, as defined by JNDI or other connection provider. See the JNDI specification for more details.
property.connectionUrl.group.connection.name= Connection URL
# debugging means investigating a problem to determine the cause. A connection pool is a technical term, see http://en.wikipedia.org/wiki/Connection_pool
property.connectionUrl.group.connection.descr= Provides the JDBC Connection URL, which overrides the Connection Name. The Connection URL does not use a connection pool, it should only be used for debugging or other situations where performance is not a concern.
property.connectionManager.name= Connection Manager ID
property.connectionManager.descr= Provides the JDBC Connection Manager, defined as a control in the page. This allows multiple data sources to execute in a common transaction.
property.sqlFile.name= SQL File Name
# "sqlTable" and "sqlQuery" should not be translated
property.sqlFile.descr= Provides the reference to a file containing the SQL query to execute, if neither "sqlTable" nor "sqlQuery" have been specified.
property.sqlQuery.name= SQL Query
# "sqlTable" should not be translated
property.sqlQuery.descr= SQL query to execute, if no "sqlTable" has been specified.
property.sqlTable.name= SQL Table
# "sqlQuery" and "sqlFile" should not be translated
property.sqlTable.descr= SQL table, view, or stored procedure to browse. This overrides the "sqlQuery" or the "sqlFile" properties.
property.sqlParameters.name= SQL Parameters
# the "?" is a special marker and should not be translated
property.sqlParameters.descr= Provides a list of runtime parameters values to the query. The order of the parameters in the list must match the "?" in the SQL query.
component.jdbcConnectionManager.name= JDBC Connection Manager
component.jdbcConnectionManager.descr= JDBC Connection Manager used to execute multiple data sources within the same JDBC transaction.
property.autoCommit.name= Automatically Commit
property.autoCommit.descr= Automatically commits every update to the database, so that the changes are immediately permanent. The default value is false (not auto commit), which includes updates in a transaction. The entire transaction of many updates will later be committed.
property.transactionIsolation.name= Transaction Isolation
# "API" and "java.sql.Connection#setTransactionIsolation" should not be translated, as they are technical terms.
property.transactionIsolation.descr= Sets the Transaction Isolation mode to one of the pre-defined options. For more details, see the API documentation for java.sql.Connection#setTransactionIsolation
property.initConnection.name= After Initialize Connection Method Binding
# "connection" in quote marks should not be translated.
property.initConnection.descr= Gets triggered after the JDBC connection is initialized to process further initialization. The connection object is available using the "connection" symbol while evaluating the expression.
complex-type.jdbcQuery.name= JDBC Query
complex-type.jdbcQuery.descr= Specifies the data source that accesses relational data using an SQL query. This data source is read only.
property.calculateCount.name= Calculate Count
property.calculateCount.descr= Indicates if the ResultSet count should be computed to get an accurate number of pages in the pagers. A specific SQL query can be provided to optimize this computation.
property.sqlCountQuery.name= SQL Count Query
property.sqlCountQuery.descr= SQL query to calculate the size of the result set.
property.sqlCountFile.name= SQL Count Query File Name
property.sqlCountFile.descr= Reference to a file containing the SQL query to calculate the size of the result set.
property.defaultOrderBy.name= Default Order By
property.defaultOrderBy.descr= Contains the order by clause, as a list of column names separated by a comma, used to set the ordering sequence of the query.
complex-type.sqlParameter.name= SQL Parameter
complex-type.sqlParameter.descr= Specifies the parameter value for a SQL query.
property.value.name= Parameter Value
property.value.descr= Specifies the value of the parameter.
complex-type.jdbcRowSet.name= JDBC RowSet
# RowSet should not be translated, as it is a class name
complex-type.jdbcRowSet.descr= Specifies the data source that accesses relational data using a JDBC RowSet
property.rowSetJavaClass.name= RowSet Java Class Name
property.rowSetJavaClass.descr= Specifies the Java class name for the RowSet. If empty, then it uses the default provided by the JRE (CachedRowSetImpl).
property.maxRows.name= Maximum Number of Rows
property.maxRows.descr= Defines the maximum number of rows retrieved by the RowSet. Defaults to 0, which means all the rows. -1 means no rows.
property.showDeleted.name= Show Deleted Rows
property.showDeleted.descr= Indicates if the deleted rows should be displayed.
